{
    "docs": [
        {
            "location": "/",
            "text": "zend-expressive-authorization-acl\n\n\n\n\n\n\nThis library provides ... \n\n\nInstallation\n\n\nRun the following to install this library:\n\n\n$ composer require zendframework/zend-expressive-authorization-acl\n\n\n\nDocumentation\n\n\nDocumentation is \nin the doc tree\n, and can be compiled using \nmkdocs\n:\n\n\n$ mkdocs build\n\n\n\nYou may also \nbrowse the documentation online\n.",
            "title": "Home"
        },
        {
            "location": "/#zend-expressive-authorization-acl",
            "text": "This library provides ...",
            "title": "zend-expressive-authorization-acl"
        },
        {
            "location": "/#installation",
            "text": "Run the following to install this library:  $ composer require zendframework/zend-expressive-authorization-acl",
            "title": "Installation"
        },
        {
            "location": "/#documentation",
            "text": "Documentation is  in the doc tree , and can be compiled using  mkdocs :  $ mkdocs build  You may also  browse the documentation online .",
            "title": "Documentation"
        },
        {
            "location": "/v1/intro/",
            "text": "Introduction\n\n\nThis component provides \nAccess Control List\n\n(ACL) authorization abstraction for the \nzend-expressive-authorization\n\nlibrary.\n\n\nACLs are based around the idea of \nresources\n and \nroles\n:\n\n\n\n\na \nresource\n is an object to which access is controlled;\n\n\na \nrole\n is an object that may request access to a resource.\n\n\n\n\nPut simply, roles request access to resources. For example, if a parking\nattendant requests access to a car, then the parking attendant is the requesting\nrole, and the car is the resource, since access to the car may not be granted to\neveryone.\n\n\nThrough the specification and use of an ACL, an application may control how\nroles are granted access to resources. For instance, in a web application a\n\nresource\n can be a page, a portion of a view, a route, etc. A \nrole\n can vary\nbased on the context in which the request is made: it could be the client\nidentity sent with an API request; whether the users is an \nanonymous guest\n or a\n\nregistered user\n of the site; etc.\n\n\nConfigure an ACL system\n\n\nYou can provide your ACL definitions using a configuration file, as follows:\n\n\n// config/autoload/authorization.local.php\nreturn [\n    // ...\n    'zend-expressive-authorization-acl' => [\n        'roles' => [\n            'administrator' => [],\n            'editor'        => ['administrator'],\n            'contributor'   => ['editor'],\n        ],\n        'resources' => [\n            'admin.dashboard',\n            'admin.posts',\n            'admin.publish',\n            'admin.settings'\n        ],\n        'allow' => [\n            'administrator' => ['admin.settings'],\n            'contributor' => [\n                'admin.dashboard',\n                'admin.posts',\n            ],\n            'editor' => [\n                'admin.publish'\n            ]\n        ]\n    ]\n];\n\n\n\n\n\nWe use this same example in the documentation of \nzend-expressive-authorization-rbac\n,\nso that you can compare and contrast the two systems.\n\n\n\n\nThe above configuration defines three roles for a blog web site:\n\nadministrator\n, \neditor\n, and \ncontributor\n. The \nadministrator\n has the\nhighest level of authorization (no parent).  A \ncontributor\n has the permission\nto create a post and manage the dashboard; its parent role is the\n\nadministrator\n.  Finally, an \neditor\n can only create or update a post; its\nparent role is the \neditor\n.\n\n\n\n\nIn ACL systems, parent roles inherit the permissions of their children.\n\n\n\n\nWithin zend-expressive-authorization-acl, \nresources\n are mapped to the \nroute\nname\n currently being requested.  By default, all resources are denied access,\nunless otherwise stated. In our example, we allow the route \nadmin.settings\n for\nthe \nadministrator\n, the routes \nadmin.dashboard\n and \nadmin.posts\n for the\n\ncontributor\n, and the route \nadmin.publish\n for the \neditor\n. Because the\n\ncontributor\n inherits permissions from \neditor\n, they will also have access to\nthe \nadmin.publish\n route. Because the \nadministrator\n inherits permissions from\n\ncontributor\n, they will have access to \nall\n routes.\n\n\nYou can also deny a resource using the \ndeny\n key in the configuration file.\nFor instance, you can deny access to the route \nadmin.dashboard\n by the\n\nadministrator\n by adding the following configuration in the previous example:\n\n\nreturn [\n    // ...\n    'zend-expressive-authorization-acl' => [\n        // previous configuration array\n        'deny' => [\n            'administrator' => ['admin.dashboard']\n        ]\n    ]\n]\n\n\n\nThe usage of \nallow\n and \ndeny\n can help to configure complex permission\nscenarios, including or excluding specific authorizations.\n\n\nAs noted earlier, zend-expressive-authorization-acl uses the current route name\nto determine the resource. If you want to change the permissions type and the\nlogic for authorization, you will need to provide a custom implementation of\n\nZend\\Expressive\\Authorization\\AuthorizationInterface\n.\n\n\n\n\nzend-expressive-authorization-acl uses \nzend-permissions-acl\n\nto implement its ACL system. For more information, we suggest reading the\n\nzend-acl documentation\n.",
            "title": "Introduction"
        },
        {
            "location": "/v1/intro/#introduction",
            "text": "This component provides  Access Control List \n(ACL) authorization abstraction for the  zend-expressive-authorization \nlibrary.  ACLs are based around the idea of  resources  and  roles :   a  resource  is an object to which access is controlled;  a  role  is an object that may request access to a resource.   Put simply, roles request access to resources. For example, if a parking\nattendant requests access to a car, then the parking attendant is the requesting\nrole, and the car is the resource, since access to the car may not be granted to\neveryone.  Through the specification and use of an ACL, an application may control how\nroles are granted access to resources. For instance, in a web application a resource  can be a page, a portion of a view, a route, etc. A  role  can vary\nbased on the context in which the request is made: it could be the client\nidentity sent with an API request; whether the users is an  anonymous guest  or a registered user  of the site; etc.",
            "title": "Introduction"
        },
        {
            "location": "/v1/intro/#configure-an-acl-system",
            "text": "You can provide your ACL definitions using a configuration file, as follows:  // config/autoload/authorization.local.php\nreturn [\n    // ...\n    'zend-expressive-authorization-acl' => [\n        'roles' => [\n            'administrator' => [],\n            'editor'        => ['administrator'],\n            'contributor'   => ['editor'],\n        ],\n        'resources' => [\n            'admin.dashboard',\n            'admin.posts',\n            'admin.publish',\n            'admin.settings'\n        ],\n        'allow' => [\n            'administrator' => ['admin.settings'],\n            'contributor' => [\n                'admin.dashboard',\n                'admin.posts',\n            ],\n            'editor' => [\n                'admin.publish'\n            ]\n        ]\n    ]\n];   We use this same example in the documentation of  zend-expressive-authorization-rbac ,\nso that you can compare and contrast the two systems.   The above configuration defines three roles for a blog web site: administrator ,  editor , and  contributor . The  administrator  has the\nhighest level of authorization (no parent).  A  contributor  has the permission\nto create a post and manage the dashboard; its parent role is the administrator .  Finally, an  editor  can only create or update a post; its\nparent role is the  editor .   In ACL systems, parent roles inherit the permissions of their children.   Within zend-expressive-authorization-acl,  resources  are mapped to the  route\nname  currently being requested.  By default, all resources are denied access,\nunless otherwise stated. In our example, we allow the route  admin.settings  for\nthe  administrator , the routes  admin.dashboard  and  admin.posts  for the contributor , and the route  admin.publish  for the  editor . Because the contributor  inherits permissions from  editor , they will also have access to\nthe  admin.publish  route. Because the  administrator  inherits permissions from contributor , they will have access to  all  routes.  You can also deny a resource using the  deny  key in the configuration file.\nFor instance, you can deny access to the route  admin.dashboard  by the administrator  by adding the following configuration in the previous example:  return [\n    // ...\n    'zend-expressive-authorization-acl' => [\n        // previous configuration array\n        'deny' => [\n            'administrator' => ['admin.dashboard']\n        ]\n    ]\n]  The usage of  allow  and  deny  can help to configure complex permission\nscenarios, including or excluding specific authorizations.  As noted earlier, zend-expressive-authorization-acl uses the current route name\nto determine the resource. If you want to change the permissions type and the\nlogic for authorization, you will need to provide a custom implementation of Zend\\Expressive\\Authorization\\AuthorizationInterface .   zend-expressive-authorization-acl uses  zend-permissions-acl \nto implement its ACL system. For more information, we suggest reading the zend-acl documentation .",
            "title": "Configure an ACL system"
        }
    ]
}